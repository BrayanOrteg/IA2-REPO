# Script de despliegue autom√°tico para QuickTask con Docker
# Uso: .\deploy.ps1

Write-Host "üöÄ QuickTask - Despliegue con Docker" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host ""

# Verificar si Docker est√° instalado
Write-Host "üîç Verificando Docker..." -ForegroundColor Yellow
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker encontrado: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Docker no est√° instalado o no est√° en el PATH" -ForegroundColor Red
    Write-Host "   Instala Docker Desktop desde: https://www.docker.com/products/docker-desktop" -ForegroundColor Yellow
    exit 1
}

# Verificar si Docker Compose est√° disponible
Write-Host "üîç Verificando Docker Compose..." -ForegroundColor Yellow
try {
    $composeVersion = docker-compose --version
    Write-Host "‚úÖ Docker Compose encontrado: $composeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Docker Compose no est√° disponible" -ForegroundColor Red
    exit 1
}

# Verificar si Docker daemon est√° corriendo
Write-Host "üîç Verificando Docker daemon..." -ForegroundColor Yellow
try {
    docker ps | Out-Null
    Write-Host "‚úÖ Docker daemon est√° corriendo" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Docker daemon no est√° corriendo" -ForegroundColor Red
    Write-Host "   Inicia Docker Desktop desde el men√∫ de Windows" -ForegroundColor Yellow
    exit 1
}

Write-Host ""
Write-Host "üì¶ Construyendo imagen Docker..." -ForegroundColor Yellow
docker-compose build

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Error al construir la imagen" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Imagen construida exitosamente" -ForegroundColor Green
Write-Host ""

Write-Host "üöÄ Iniciando contenedor..." -ForegroundColor Yellow
docker-compose up -d

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Error al iniciar el contenedor" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Contenedor iniciado exitosamente" -ForegroundColor Green
Write-Host ""

# Esperar a que el servidor est√© listo
Write-Host "‚è≥ Esperando a que el servidor est√© listo..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

# Verificar health check
Write-Host "üè• Verificando health check..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8000/api/health" -Method GET -UseBasicParsing
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ API est√° respondiendo correctamente" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è Advertencia: No se pudo verificar el health check" -ForegroundColor Yellow
    Write-Host "   La API puede estar iniciando todav√≠a" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host "‚úÖ ¬°Despliegue completado!" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìç URLs disponibles:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ API:         http://localhost:8000" -ForegroundColor White
Write-Host "   ‚Ä¢ API Docs:    http://localhost:8000/docs" -ForegroundColor White
Write-Host "   ‚Ä¢ Health:      http://localhost:8000/api/health" -ForegroundColor White
Write-Host ""
Write-Host "üìã Comandos √∫tiles:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Ver logs:    docker-compose logs -f" -ForegroundColor White
Write-Host "   ‚Ä¢ Detener:     docker-compose down" -ForegroundColor White
Write-Host "   ‚Ä¢ Reiniciar:   docker-compose restart" -ForegroundColor White
Write-Host ""
Write-Host "üìö Documentaci√≥n:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ DOCKER_QUICKSTART.md  - Gu√≠a r√°pida" -ForegroundColor White
Write-Host "   ‚Ä¢ DOCKER_DEPLOY.md      - Gu√≠a completa" -ForegroundColor White
Write-Host ""
